#!/usr/bin/env python
# coding: utf-8

# In[1]:


import matplotlib.pyplot as plt # plt 用於顯示圖片
import matplotlib.image as mpimg # mpimg 用於讀取圖片
import numpy as np
import cv2
import math
import copy
import random
lena = mpimg.imread('lena.bmp') # 讀取和程式碼處於同一目錄下的 lena.bmp
# 此時 lena 就已經是一個 np.array 了，可以對它進行任意處理
print(lena.shape) #(512, 512)
plt.imshow(lena) # 顯示圖片
#plt.show()


# ## calculate SNR

# In[2]:


def SNR(img,noise_img):
    img = img.astype(int)
    noise_img = noise_img.astype(int)
    VS = np.var(img)
    VN = np.var(noise_img - img)
    return 20 * math.log10(math.sqrt(VS) / math.sqrt(VN))


# ## part(a) Generate noisy images with gaussian noise(amplitude of 10 and 30)

# In[3]:


def gaussian_noise(img, amplitude):
    answer = img.copy()
    for i in range(img.shape[0]):
        for j in range(img.shape[1]):
            g_noise = img[i][j] + amplitude * random.gauss(0,1)
            if g_noise > 255:
                g_noise = 255
            answer[i][j] = g_noise
    return answer


# In[4]:


#amplitude = 10
g_noise_10 = gaussian_noise(lena,10)
cv2.imwrite("part(a)_10.bmp", g_noise_10)
plt.imshow(g_noise_10)
print("SNR =",SNR(g_noise_10,lena))


# In[5]:


#amplitude = 30
g_noise_30 = gaussian_noise(lena,30)
cv2.imwrite("part(a)_30.bmp", g_noise_30)
plt.imshow(g_noise_30)
print("SNR =",SNR(g_noise_30,lena))


# ## part(b) Generate noisy images with salt-and-pepper noise( probability 0.1 and 0.05)

# In[6]:


def salt_and_pepper_noise(img, probability):
    answer = img.copy()
    for i in range(img.shape[0]):
        for j in range(img.shape[1]):
            sp_noise = random.uniform(0,1)
            if sp_noise < probability:
                answer[i][j] = 0
            elif sp_noise >= 1-probability:
                answer[i][j] = 255
            else:
                answer[i][j] = img[i][j]
    return answer


# In[7]:


#probability = 0.1
sp_noise_10 = salt_and_pepper_noise(lena, 0.1)
cv2.imwrite("part(b)_10.bmp", sp_noise_10)
plt.imshow(sp_noise_10)
print("SNR =",SNR(sp_noise_10,lena))


# In[8]:


#probability = 0.05
sp_noise_05 = salt_and_pepper_noise(lena, 0.05)
cv2.imwrite("part(b)_05.bmp", sp_noise_05)
plt.imshow(sp_noise_05)
print("SNR =",SNR(sp_noise_05,lena))


# ## part(c) Use the 3x3, 5x5 box filter on images generated by (a)(b)

# In[9]:


def padding(img,size):
    answer = cv2.copyMakeBorder(img, size//2, size//2, size//2, size//2, cv2.BORDER_REFLECT)
    return answer


# In[10]:


def box_filter(padding,img,size):
    answer = img.copy()
    tmp = 0
    for i in range(img.shape[0]):
        for j in range(img.shape[1]): 
            tmp = 0
            for a in range(-size//2+1,size//2+1):
                for b in range(-size//2+1,size//2+1):
                    tmp = tmp + padding[i+a+size//2][j+b+size//2]
            answer[i][j] = tmp / (size*size)
    return answer


# In[11]:


#3X3 box_filter
box_filter_size3 = 3
#5X5 box_filter
box_filter_size5 = 5


# In[12]:


#3X3 box_filter-gaussian noise with amplitude 10(g_noise_10) 
pad3X3_g_noise_10 = padding(g_noise_10,box_filter_size3)
box_filter3X3_g_noise_10 = box_filter(pad3X3_g_noise_10,g_noise_10,box_filter_size3)
cv2.imwrite("part(c)_3X3_a_10.bmp", box_filter3X3_g_noise_10)
plt.imshow(box_filter3X3_g_noise_10)
print("SNR =",SNR(box_filter3X3_g_noise_10,lena))


# In[13]:


#5X5 box_filter-gaussian noise with amplitude 10(g_noise_10) 
pad5X5_g_noise_10 = padding(g_noise_10,box_filter_size5)
box_filter5X5_g_noise_10 = box_filter(pad5X5_g_noise_10,g_noise_10,box_filter_size5)
cv2.imwrite("part(c)_5X5_a_10.bmp", box_filter5X5_g_noise_10)
plt.imshow(box_filter5X5_g_noise_10)
print("SNR =",SNR(box_filter5X5_g_noise_10,lena))


# In[14]:


#3X3 box_filter-gaussian noise with amplitude 30(g_noise_30) 
pad3X3_g_noise_30 = padding(g_noise_30,box_filter_size3)
box_filter3X3_g_noise_30 = box_filter(pad3X3_g_noise_30,g_noise_30,box_filter_size3)
cv2.imwrite("part(c)_3X3_a_30.bmp", box_filter3X3_g_noise_30)
plt.imshow(box_filter3X3_g_noise_30)
print("SNR =",SNR(box_filter3X3_g_noise_30,lena))


# In[15]:


#5X5 box_filter-gaussian noise with amplitude 30(g_noise_30) 
pad5X5_g_noise_30 = padding(g_noise_30,box_filter_size5)
box_filter5X5_g_noise_30 = box_filter(pad5X5_g_noise_30,g_noise_30,box_filter_size5)
cv2.imwrite("part(c)_5X5_a_30.bmp", box_filter5X5_g_noise_30)
plt.imshow(box_filter5X5_g_noise_30)
print("SNR =",SNR(box_filter5X5_g_noise_30,lena))


# In[16]:


#3X3 box_filter-salt-and-pepper noise with probability 0.1(sp_noise_10) 
pad3X3_sp_noise_10 = padding(sp_noise_10,box_filter_size3)
box_filter3X3_sp_noise_10 = box_filter(pad3X3_sp_noise_10,sp_noise_10,box_filter_size3)
cv2.imwrite("part(c)_3X3_b_10.bmp", box_filter3X3_sp_noise_10)
plt.imshow(box_filter3X3_sp_noise_10)
print("SNR =",SNR(box_filter3X3_sp_noise_10,lena))


# In[17]:


#5X5 box_filter-salt-and-pepper noise with probability 0.1(sp_noise_10) 
pad5X5_sp_noise_10 = padding(sp_noise_10,box_filter_size5)
box_filter5X5_sp_noise_10 = box_filter(pad5X5_sp_noise_10,sp_noise_10,box_filter_size5)
cv2.imwrite("part(c)_5X5_b_10.bmp", box_filter5X5_sp_noise_10)
plt.imshow(box_filter5X5_sp_noise_10)
print("SNR =",SNR(box_filter5X5_sp_noise_10,lena))


# In[18]:


#3X3 box_filter-salt-and-pepper noise with probability 0.05(sp_noise_05) 
pad3X3_sp_noise_05 = padding(sp_noise_05,box_filter_size3)
box_filter3X3_sp_noise_05 = box_filter(pad3X3_sp_noise_05,sp_noise_05,box_filter_size3)
cv2.imwrite("part(c)_3X3_b_05.bmp", box_filter3X3_sp_noise_05)
plt.imshow(box_filter3X3_sp_noise_05)
print("SNR =",SNR(box_filter3X3_sp_noise_05,lena))


# In[19]:


#5X5 box_filter-salt-and-pepper noise with probability 0.05(sp_noise_05) 
pad5X5_sp_noise_05 = padding(sp_noise_05,box_filter_size5)
box_filter5X5_sp_noise_05 = box_filter(pad5X5_sp_noise_05,sp_noise_05,box_filter_size5)
cv2.imwrite("part(c)_5X5_b_05.bmp", box_filter5X5_sp_noise_05)
plt.imshow(box_filter5X5_sp_noise_05)
print("SNR =",SNR(box_filter5X5_sp_noise_05,lena))


# ## part(d) Use 3x3, 5x5 median filter on images generated by (a)(b)

# In[20]:


def median_filter(padding,img,size):
    answer = img.copy()
    tmp = []
    #med = 0
    for i in range(img.shape[0]):
        for j in range(img.shape[1]): 
            tmp = []
            for a in range(-size//2+1,size//2+1):
                for b in range(-size//2+1,size//2+1):
                    tmp.append(padding[i+a+size//2][j+b+size//2])
            #med = np.median(np.array(tmp))
            answer[i][j] = np.median(np.array(tmp))
    return answer


# In[21]:


#3X3 median_filter
median_filter_size3 = 3
#5X5 median_filter
median_filter_size5 = 5


# In[22]:


#3X3 median_filter-gaussian noise with amplitude 10(g_noise_10) 
pad3X3_g_noise_10 = padding(g_noise_10,median_filter_size3)
median_filter3X3_g_noise_10 = median_filter(pad3X3_g_noise_10,g_noise_10,median_filter_size3)
cv2.imwrite("part(d)_3X3_a_10.bmp", median_filter3X3_g_noise_10)
plt.imshow(median_filter3X3_g_noise_10)
print("SNR =",SNR(median_filter3X3_g_noise_10,lena))


# In[23]:


#5X5 median_filter-gaussian noise with amplitude 10(g_noise_10) 
pad5X5_g_noise_10 = padding(g_noise_10,median_filter_size5)
median_filter5X5_g_noise_10 = median_filter(pad5X5_g_noise_10,g_noise_10,median_filter_size5)
cv2.imwrite("part(d)_5X5_a_10.bmp", median_filter5X5_g_noise_10)
plt.imshow(median_filter5X5_g_noise_10)
print("SNR =",SNR(median_filter5X5_g_noise_10,lena))


# In[24]:


#3X3 median_filter-gaussian noise with amplitude 30(g_noise_30) 
pad3X3_g_noise_30 = padding(g_noise_30,median_filter_size3)
median_filter3X3_g_noise_30 = median_filter(pad3X3_g_noise_30,g_noise_30,median_filter_size3)
cv2.imwrite("part(d)_3X3_a_30.bmp", median_filter3X3_g_noise_30)
plt.imshow(median_filter3X3_g_noise_30)
print("SNR =",SNR(median_filter3X3_g_noise_30,lena))


# In[25]:


#5X5 median_filter-gaussian noise with amplitude 30(g_noise_30) 
pad5X5_g_noise_30 = padding(g_noise_30,median_filter_size5)
median_filter5X5_g_noise_30 = median_filter(pad5X5_g_noise_30,g_noise_30,median_filter_size5)
cv2.imwrite("part(d)_5X5_a_30.bmp", median_filter5X5_g_noise_30)
plt.imshow(median_filter5X5_g_noise_30)
print("SNR =",SNR(median_filter5X5_g_noise_30,lena))


# In[26]:


#3X3 median_filter-salt-and-pepper noise with probability 0.1(sp_noise_10) 
pad3X3_sp_noise_10 = padding(sp_noise_10,median_filter_size3)
median_filter3X3_sp_noise_10 = median_filter(pad3X3_sp_noise_10,sp_noise_10,median_filter_size3)
cv2.imwrite("part(d)_3X3_b_10.bmp", median_filter3X3_sp_noise_10)
plt.imshow(median_filter3X3_sp_noise_10)
print("SNR =",SNR(median_filter3X3_sp_noise_10,lena))


# In[27]:


#5X5 median_filter-salt-and-pepper noise with probability 0.1(sp_noise_10) 
pad5X5_sp_noise_10 = padding(sp_noise_10,median_filter_size5)
median_filter5X5_sp_noise_10 = median_filter(pad5X5_sp_noise_10,sp_noise_10,median_filter_size5)
cv2.imwrite("part(d)_5X5_b_10.bmp", median_filter5X5_sp_noise_10)
plt.imshow(median_filter5X5_sp_noise_10)
print("SNR =",SNR(median_filter5X5_sp_noise_10,lena))


# In[28]:


#3X3 median_filter-salt-and-pepper noise with probability 0.05(sp_noise_05) 
pad3X3_sp_noise_05 = padding(sp_noise_05,median_filter_size3)
median_filter3X3_sp_noise_05 = median_filter(pad3X3_sp_noise_05,sp_noise_05,median_filter_size3)
cv2.imwrite("part(d)_3X3_b_05.bmp", median_filter3X3_sp_noise_05)
plt.imshow(median_filter3X3_sp_noise_05)
print("SNR =",SNR(median_filter3X3_sp_noise_05,lena))


# In[29]:


#5X5 median_filter-salt-and-pepper noise with probability 0.05(sp_noise_05) 
pad5X5_sp_noise_05 = padding(sp_noise_05,median_filter_size5)
median_filter5X5_sp_noise_05 = median_filter(pad5X5_sp_noise_05,sp_noise_05,median_filter_size5)
cv2.imwrite("part(d)_5X5_b_05.bmp", median_filter5X5_sp_noise_05)
plt.imshow(median_filter5X5_sp_noise_05)
print("SNR =",SNR(median_filter5X5_sp_noise_05,lena))


# ## part(e) Use both opening-then-closing and closing-then opening filter (using the octogonal 3-5-5-5-3 kernel, value = 0) on images generated by (a)(b)

# In[30]:


#set kernel
kernel = np.array([0, 1, 1, 1, 0,
                   1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1,
                   1, 1, 1, 1, 1,
                   0, 1, 1, 1, 0,]).reshape((5, 5))


# In[31]:


# dilation
def dilation(img,kernel):
    dilation_img = np.zeros(img.shape, np.int)
    row, col = img.shape
    kernel_row, kernel_col = kernel.shape
    for i in range(row):
        for j in range(col):
            if img[i, j] > 0:
                maximum = 0
                for m in range(-round(kernel_row/2), -round(kernel_row/2)+kernel_row):
                    for n in range(-round(kernel_col/2), -round(kernel_col/2)+kernel_col):
                        if kernel[m+round(kernel_row/2), n+round(kernel_col/2)] > 0:
                            if (i+m) < row and (j+n) < col and (i+m) >= 0 and (j+n) >= 0:
                                maximum = max(maximum, img[i+m, j+n])
                for m in range(-round(kernel_row/2), -round(kernel_row/2)+kernel_row):
                    for n in range(-round(kernel_col/2), -round(kernel_col/2)+kernel_col):
                        if kernel[m+round(kernel_row/2), n+round(kernel_col/2)] > 0:
                            if (i+m) < row and (j+n) < col and (i+m) >= 0 and (j+n) >= 0:
                                dilation_img[i+m, j+n] = maximum
    return dilation_img


# In[32]:


# erosion
def erosion(img,kernel):
    erosion_img = np.zeros(img.shape, np.int)
    row, col = img.shape
    kernel_row, kernel_col = kernel.shape
    for i in range(row):
        for j in range(col):
            flag = True
            minimun = 255
            for m in range(-round(kernel_row/2), -round(kernel_row/2)+kernel_row):
                for n in range(-round(kernel_col/2), -round(kernel_col/2)+kernel_col):
                    if kernel[m+round(kernel_row/2), n+round(kernel_col/2)] > 0:
                        if (i+m) > (row-1) or (j+n) > (col-1) or (i+m) < 0 or (j+n) < 0 or img[i+m, j+n] == 0:
                            flag = False
                            break
                        else:
                            minimun = min(minimun, img[i+m, j+n])
            if flag:
                erosion_img[i, j] = minimun
    return erosion_img


# In[33]:


# opening
def opening(img,kernel):
    return dilation(erosion(img,kernel),kernel)
# closing
def closing(img,kernel):
    return erosion(dilation(img,kernel),kernel)
# opening then closing
def opening_closing(img,kernel):
    return closing(opening(img,kernel),kernel)
# closing then opening
def closing_opening(img,kernel):
    return opening(closing(img,kernel),kernel)


# In[34]:


#opening-then-closing-gaussian noise with amplitude 10(g_noise_10) 
otc_g_noise_10 = opening_closing(g_noise_10,kernel)
cv2.imwrite("part(e)_otc_a_10.bmp", otc_g_noise_10)
plt.imshow(otc_g_noise_10)
print("SNR =",SNR(otc_g_noise_10,lena))


# In[35]:


#closing-then-opening-gaussian noise with amplitude 10(g_noise_10) 
cto_g_noise_10 = closing_opening(g_noise_10,kernel)
cv2.imwrite("part(e)_cto_a_10.bmp", cto_g_noise_10)
plt.imshow(cto_g_noise_10)
print("SNR =",SNR(cto_g_noise_10,lena))


# In[36]:


#opening-then-closing-gaussian noise with amplitude 30(g_noise_30) 
otc_g_noise_30 = opening_closing(g_noise_30,kernel)
cv2.imwrite("part(e)_otc_a_30.bmp", otc_g_noise_30)
plt.imshow(otc_g_noise_30)
print("SNR =",SNR(otc_g_noise_30,lena))


# In[37]:


#closing-then-opening-gaussian noise with amplitude 30(g_noise_30) 
cto_g_noise_30 = closing_opening(g_noise_30,kernel)
cv2.imwrite("part(e)_cto_a_30.bmp", cto_g_noise_30)
plt.imshow(cto_g_noise_30)
print("SNR =",SNR(cto_g_noise_30,lena))


# In[42]:


#opening-then-closing-salt-and-pepper noise with probability 0.1(sp_noise_10) 
otc_sp_noise_10 = opening_closing(sp_noise_10,kernel)
cv2.imwrite("part(e)_otc_b_10.bmp", otc_sp_noise_10)
plt.imshow(otc_sp_noise_10)
print("SNR =",SNR(otc_sp_noise_10,lena))


# In[43]:


#closing-then-opening-salt-and-pepper noise with probability 0.1(sp_noise_10) 
cto_sp_noise_10 = closing_opening(sp_noise_10,kernel)
cv2.imwrite("part(e)_cto_b_10.bmp", cto_sp_noise_10)
plt.imshow(cto_sp_noise_10)
print("SNR =",SNR(cto_sp_noise_10,lena))


# In[44]:


#opening-then-closing-salt-and-pepper noise with probability 0.05(sp_noise_05) 
otc_sp_noise_05 = opening_closing(sp_noise_05,kernel)
cv2.imwrite("part(e)_otc_b_05.bmp", otc_sp_noise_05)
plt.imshow(otc_sp_noise_05)
print("SNR =",SNR(otc_sp_noise_05,lena))


# In[45]:


#closing-then-opening-salt-and-pepper noise with probability 0.05(sp_noise_05) 
cto_sp_noise_05 = closing_opening(sp_noise_05,kernel)
cv2.imwrite("part(e)_cto_b_05.bmp", cto_sp_noise_05)
plt.imshow(cto_sp_noise_05)
print("SNR =",SNR(cto_sp_noise_05,lena))


# In[ ]:




